name: release-main

on:
  push:
    branches: [main]

  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag version for this release'
        required: true
        default: 'x.y.z'

jobs:
  windows-build:      
    runs-on: windows-latest
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Set up the environment
        uses: ./.github/actions/setup-poetry-env

      - name: Build executable - PyInstaller
        uses: sayyid5416/pyinstaller@v1
        with:
          spec: "main.py"
          requirements: "requirements.txt"
          upload_exe_with_name: "HPM ${{ github.event.inputs.tag || github.ref_name }}"
          options: -w, --name "HPM ${{ github.event.inputs.tag || github.ref_name }}", --icon "Houdini_Package_Manager/resources/icons/hpm.ico",

      - name: Verify built files for Windows
        run: ls -R dist/
        shell: bash         

  # working linux builder workflow if there is a future need
  # linux-build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out
  #       uses: actions/checkout@v3

  #     - name: Set up the environment
  #       uses: ./.github/actions/setup-poetry-env

  #     - name: Install extra Linux system dependencies for PySide6
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y \
  #           libxcb-icccm4 \
  #           libxkbcommon-x11-0 \
  #           libxcb-render-util0 \
  #           libxcb-keysyms1 \
  #           libxcb-shape0 \
  #           libxcb-image0
  #       shell: bash

  #     - name: Build executable - PyInstaller
  #       uses: sayyid5416/pyinstaller@v1
  #       with:
  #         spec: "main.py"
  #         upload_exe_with_name: "HPM ${{ github.event.inputs.tag || github.ref_name }}"
  #         options: -w, --name "HPM ${{ github.event.inputs.tag || github.ref_name }}", --icon "Houdini_Package_Manager/resources/icons/hpm.ico",

  #     - name: Verify built files for Linux
  #       run: ls -R dist/
  #       shell: bash        

  release:
    runs-on: ubuntu-latest
    needs: [windows-build]
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          release_name: ${{ github.event.inputs.tag || github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Build and publish to PyPI
        run: |
          source .venv/bin/activate
          poetry version $RELEASE_VERSION
          make build-and-publish
        env: 
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          RELEASE_VERSION: ${{ github.event.inputs.tag || github.ref_name }}
